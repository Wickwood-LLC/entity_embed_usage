<?php

use Drupal\Core\Entity\ContentEntityBase;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Component\Utility\Html;

/**
 * Implements hook_entity_presave().
 */
function entity_embed_usage_entity_presave(EntityInterface $entity) {
  if ($entity instanceof ContentEntityBase) {
    $entity_field_manager = \Drupal::service('entity_field.manager');
    $entity_manager = \Drupal::service('entity_type.manager');
    foreach ($entity_field_manager->getFieldDefinitions($entity->getEntityTypeId(), $entity->bundle()) as $field_name => $field_definition) {
      if (!empty($field_definition->getTargetBundle())) {
        if ($field_definition->getType() == 'text_with_summary') {
          $field = $entity->get($field_name);
          $values = $field->getValue();
          foreach ($values as $delta => $value) {
            // TODO: Delete usage records for this field-property
            $property = 'value';
            // TODO: Combine DELETE queries?
            $result = \Drupal::database()
              ->delete('entity_embed_usage')
              ->condition('host_entity_type', $entity->getEntityTypeId())
              ->condition('host_entity_id', $entity->id())
              ->condition('host_entity_field_name', $field_name)
              ->condition('host_entity_field_delta', $delta)
              ->condition('host_entity_field_property', $property)
              ->execute();

            $dom = Html::load($value[$property]);
            $xpath = new \DOMXPath($dom);

            $embeds = [];

            foreach ($xpath->query('//drupal-entity[@data-entity-type and (@data-entity-uuid or @data-entity-id) and (@data-entity-embed-display or @data-view-mode)]') as $node) {
              /** @var \DOMElement $node */
              $embedded_entity_type = $node->getAttribute('data-entity-type');
              $embedded_entity = NULL;
              $entity_output = '';

              try {
                // Load the entity either by UUID (preferred) or ID.
                $id = NULL;
                if ($id = $node->getAttribute('data-entity-uuid')) {
                  $embedded_entity = $entity_manager->getStorage($embedded_entity_type)
                    ->loadByProperties(['uuid' => $id]);
                  $embedded_entity = current($embedded_entity);
                }
                else {
                  $id = $node->getAttribute('data-entity-id');
                  $embedded_entity = $entity_manager->getStorage($embedded_entity_type)->load($id);
                }
              }
              catch (EntityNotFoundException $e) {
                watchdog_exception('media_extra', $e);
              }

              if ($embedded_entity instanceof EntityInterface) {
                $embedded_entity_bundle = $embedded_entity->bundle();
                $embedded_entity_id = $embedded_entity->id();
                if (!isset($embeds["$embedded_entity_type.$embedded_entity_bundle.$embedded_entity_id"])) {
                  $embeds["$embedded_entity_type.$embedded_entity_bundle.$embedded_entity_id"] = 1;
                }
                else {
                  $embeds["$embedded_entity_type.$embedded_entity_bundle.$embedded_entity_id"]++;
                }
              }
            }
            foreach ($embeds as $key => $count) {
              list($embedded_entity_type, $embedded_entity_bundle, $embedded_entity_id) = explode('.', $key);
              // TODO: Combine INSERT queries?
              \Drupal::database()
              ->insert('entity_embed_usage')
              ->fields(array(
                'embedded_entity_type' => $embedded_entity_type,
                'embedded_entity_bundle' => $embedded_entity_bundle,
                'embedded_entity_id' => $embedded_entity_id,
                'host_entity_type' => $entity->getEntityTypeId(),
                'host_entity_bundle' => $entity->bundle(),
                'host_entity_id' => $entity->id(),
                'host_entity_field_name' => $field_name,
                'host_entity_field_delta' => $delta,
                'host_entity_field_property'=> $property,
                'count' => $count,
              ))
              ->execute();
            }
          }
        }
      }
    }
  }
}